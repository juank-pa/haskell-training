module Chapter13.Exercises.Intermission where

-- Check your understanding
-- Given:
-- import qualified Control.Concurrent        as CC
-- import qualified Control.Concurrent.MVar   as MV
-- import qualified Data.ByteString.Char8     as B
-- import qualified Data.Locator              as DL
-- import qualified Data.Time.Clock.POSIX     as PSX
-- import qualified Filesystem                as FS
-- import qualified Filesystem.Path.CurrentOS as FPC
-- import qualified Network.Info              as NI
-- import qualified Safe
-- import Control.Exception (mask, try)
-- import Control.Monad (forever, when)
-- import Data.Bits
-- import Data.Bits.Bitwise (fromListBE)
-- import Data.List.Split (chunksOf)
-- import Database.Blacktip.Types
-- import System.IO.Unsafe (unsafePerformIO)
--
-- 1. `forever` and `when` are being imported from `Control.Monad`
-- 2. `Data.Bits` and `Database.Blacktip.Types` are being imported in their
--    entirety and are not qualified.
-- 3. By its name `Database.Blacktip.Types` seems to be importing datatypes
--    related to a database.
-- 4.
-- writeTimestamp :: MV.MVar ServerState
--                -> FPC.FilePath
--                -> IO CC.ThreadId
-- writeTimestamp s path = do
--   CC.forkIO go
--   where go = forever $ do
--           ss <- MV.readMVar s
--           mask $ \_ -> do
--             FS.writeFile path (B.pack (show (ssTime ss)))
--           -- sleep for 1 second
--           CC.threadDelay 1000000
-- a) `MV`  refers to the `Control.Concurrent.MVar` module
--    `FPC` refers to the `Filesystem.Path.CurrentOS` module
--    `CC`  refers to the `Control.Concurrent` module
-- b) `FS.writeFile` refers to the `Filesystem` module
-- c) `forever`comes from `Control.Monad`
